{"version":3,"sources":["LoginForm/LoginForm.js","WelcomingSection/WelcomingSection.js","Card/Card.js","SortMovies/SortMovies.js","Cards/Cards.js","Homepage/Homepage.js","ErrorBoundary/ErrorBoundary.js","MoviePage/MovieCard/MovieCard.js","MoviePage/MovieHeader/MovieHeader.js","Comment/Comment.js","Comments/Comments.js","MoviePage/MoviePage.js","NavBar/NavBar.js","API/APIcalls.js","App/App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","updateChange","event","preventDefault","setState","target","name","value","clearInputs","userName","email","password","display","verifyCredentials","e","state","credentials","authenticateUser","this","login","id","to","className","htmlFor","type","placeholder","onChange","onClick","Component","WelcomingSection","userData","Card","displayMovieInformation","getMovieDetails","movies","retrieveComments","toggleFavorite","title","release_date","average_rating","poster_path","role","key","moment","format","favorites","aria-label","toFixed","src","alt","ratedMovies","rating","SortMovies","updateSortValue","getOptionValue","sortMovies","toggleFavorites","data-testid","propType","PropTypes","func","status","string","Cards","map","movie","i","find","ratedMovie","movie_id","favoritedMovie","Homepage","ErrorBoundary","MovieCard","movieDetails","isMovieIncluded","genreList","genres","genre","overview","runtime","budget","revenue","MovieHeader","handleChange","selectedOption","updateRating","addRating","removeRating","deleteRating","ratingValue","label","movieId","tagline","options","Comment","getCommentId","likeComment","style","color","comment","author","time","replyCount","from","Comments","updateValue","postComment","newComment","clearForm","commentId","movieComment","movieComments","likeStatus","likeMovieComment","injectComments","replies","maxLength","onSubmit","MoviePage","movieVideo","backdrop_path","length","video","controls","width","height","url","NavBar","logOut","prototype","fetcher","fetchAllMovies","fetch","then","response","ok","json","data","fetchSingleMovie","movieID","fetchedSingleMovie","fetchMovieVideo","fetchedMovieVideos","fetchUser","userInfo","int","method","headers","body","JSON","stringify","user","fetchUserRatings","userID","fetchedUserRatings","ratings","fetchCreateUserRating","newRating","fetchedUserRating","fetchDeleteUserRating","ratingID","fetchedDeleteRating","request","promise","catch","err","message","addMovieComment","URL","commentID","commentStatus","getMovieComments","getUpdatedMovieComments","getUserFavorites","addUserFavorites","App","a","getUserRatings","error","alert","retrieveFavorites","promiseMovie","promiseDetails","videos","sortedMovies","sort","b","searchDirections","desiredRatingByUser","movieToRate","allUserRatings","loadAllMovies","favoriteMovies","userComment","comments","info","hasError","errorMessage","errorInfo","path","render","exact","filter","includes","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.0269227f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport './LoginForm.scss';\nimport PropTypes from 'prop-types';\nexport class LoginForm extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        userName: '',\n        email : '',\n        password: '',\n        display: true\n    }\n  }\n\n  updateChange = (event) => {\n    event.preventDefault();\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  clearInputs = () => {\n    this.setState({\n        userName: '',\n        email : '',\n        password: '',\n        display: false\n    });\n}\n\n  verifyCredentials = (e) => {\n    e.preventDefault();\n    if (!this.state.userName && !this.state.password && !this.state.email) {\n      return false\n    } else {\n\n      const credentials = {\n        email : this.state.email,\n        password : this.state.password\n      }\n\n      this.props.authenticateUser(credentials);\n      this.clearInputs();\n\n    }\n  }\n\n  render(){\n    const {email, password} = this.state;\n    if (this.props.login && this.props.login.id && this.props.login.name !== '') {\n      return (<Redirect to='/' />)\n    }\n\n    return (\n      <form className=\"form-container\">\n\n         <Link to='/' className=\"close-login\">Back to Home</Link>\n\n        <h4 className=\"user-email\">Email</h4>\n        <label htmlFor=\"user-email\">\n          <input\n          name=\"email\"\n          type=\"text\"\n          className=\"user-email\"\n          id=\"email\"\n          placeholder=\"email\"\n          value={email}\n          onChange={this.updateChange}\n          />\n        </label>\n\n        <h4 className=\"password-title\">password</h4>\n        <label htmlFor=\"user-password\">\n          <input\n          name=\"password\"\n          type=\"password\"\n          className=\"password\"\n          id=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={this.updateChange}\n          />\n        </label>\n\n        <button\n          className=\"log-in-button\"\n          onClick={(event) => {\n            this.verifyCredentials(event)\n            }}\n        >Submit\n        </button>\n      </form>\n    )\n  }\n}\n\nLoginForm.propTypes = {\n  authenticateUser: PropTypes.func,\n  login: PropTypes.object,\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './WelcomingSection.scss';\n\nexport const WelcomingSection = (props) => {\n\n  return(\n    <div className=\"movie-section\">\n      {props.userData.name &&<h1 className=\"user-welcome\">Welcome!</h1>}\n      {props.userData && <h2 className=\"user-name\">{props.userData.name}</h2>}\n      <h3 className=\"movie-day\">Rate your next movie</h3>\n    </div>\n  )\n}\n\nWelcomingSection.propTypes = {\n  userData: PropTypes.object\n}","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './Card.scss'\nimport moment from 'moment'\n\nexport class Card extends Component{\n  // lint told me that this was a useless constructor. I kept it here just to make a note of it, but with that in mind, I think we can make card a functional component\n  // constructor(props) {\n  //   super(props)\n  // }\n\n  displayMovieInformation = () => {\n    this.props.getMovieDetails(this.props.movies.id)\n    this.props.retrieveComments(this.props.movies.id)\n  }\n\n  toggleFavorite(event) {\n    event.preventDefault();\n    this.props.toggleFavorite(this.props.movies.id)\n  }\n\n  render() {\n    const {id, title, release_date, average_rating, poster_path} = this.props.movies\n    return (\n      <NavLink className=\"movie-card\" to={`/movies/${id}`}>\n        <div \n          role=\"link\"\n          key={id} \n          id={id} \n          className=\"card\" \n          onClick={this.displayMovieInformation}\n          >\n          <h1 className=\"movie-title\">{title}</h1>\n          <h2 className=\"movie-release\">{moment(release_date).format('LL')}</h2>\n          \n          {this.props.favorites && this.props.userData &&\n          <button className=\"favorite-movie\" onClick={(event) => this.toggleFavorite(event)}><span role=\"img\" aria-label=\"heart-empty\">❤️</span></button>\n          }\n          \n          {!this.props.favorites && this.props.userData &&\n          <button className=\"favorite-movie\" onClick={(event) => this.toggleFavorite(event)}><span role=\"img\" aria-label=\"heart-empty\">♡</span></button>\n          }\n          <div className=\"rating-container\">\n            <h2 className=\"movie-rating\">Rating</h2>\n            <h2 className=\"movie-rating\">{average_rating.toFixed(1)}</h2>\n          </div>\n              <img \n                name={title}\n                id={id} \n                className=\"movie-img\" \n                src={poster_path} \n                alt={`${title} poster`}\n                >\n              </img>\n            {this.props.ratedMovies.rating ? \n            <h2 className=\"user-rating\">your rate {this.props.ratedMovies.rating.toFixed(1)}</h2> :\n            <h5 className=\"user-rating\">not rated</h5>}\n        </div> \n      </NavLink>\n    )\n  }\n}\n\nCard.propTypes = {\n  getMovieDetails: PropTypes.func,\n  movies: PropTypes.object,\n  ratedMovies:  PropTypes.object,\n  retrieveComments: PropTypes.func,\n  userData: PropTypes.number,\n  favorites: PropTypes.number\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport './SortMovies.scss';\n\nexport class SortMovies extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: '',\n            favorites: false\n        }\n    }\n\n    updateSortValue = (event) => {\n        this.setState({ [event.target.name]: event.target.value})\n    }\n\n    getOptionValue = () => {\n        this.props.sortMovies(this.state.value)\n    }\n\n    toggleFavorites = () => {\n        if (this.state.favorites) {\n            this.setState({ favorites: false })\n        } else {\n            this.setState({ favorites: true })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"sort-container\">\n              <h1 className=\"cards-title\">All movies</h1>\n              <div className=\"sort-control\">\n                <label htmlFor='sort-select' className=\"sort-title\">sort by</label>\n                <select\n                  role=\"menubar\"\n                  className=\"sort-select\"\n                  name=\"value\" \n                  value={this.state.value} \n                  onChange={this.updateSortValue} \n                  id=\"sort-select\">\n                    <option \n                      role='menuitem'\n                      data-testid='none'\n                      name=\"none\" \n                      value=\"none\"\n                      htmlFor='sort-select'\n                      >--none--\n                    </option>\n                    <option \n                      role='menuitem'\n                      data-testid='descending-one'\n                      name=\"average_rating\" \n                      value=\"descending\"\n                      htmlFor='sort-select'\n                      >Rating descending\n                    </option>\n                    <option \n                      role='menuitem'\n                      data-testid='ascending'\n                      name=\"average_rating\" \n                      value=\"ascending\"\n                      htmlFor='sort-select'\n                      >Rating ascending \n                    </option>\n                </select>\n                <button \n                  type=\"apple\" \n                  className=\"sort\"\n                  name=\"sort\"\n                  aria-label=\"sort\"\n                  onClick={this.getOptionValue}\n                  ><i type=\"apple-icon\" role='img' className=\"fas fa-apple-alt\"></i>\n                </button>\n                {this.props.userData && \n                <>\n                    {!this.state.favorites &&\n                    <>\n                        <NavLink \n                            to={`/favorites`}\n                            type=\"navlink\" \n                            role=\"button\"\n                            className=\"view-favorites\"\n                            name=\"favorites-button\"\n                            onClick={this.toggleFavorites}\n                            >\n                            Favorites\n                        </NavLink>\n                    </>\n                    }\n                    {this.state.favorites && \n                    <>\n                        <NavLink \n                            to={`/`}\n                            type=\"navlink\" \n                            role=\"button\"\n                            className=\"view-all\"\n                            name=\"all-button\"\n                            onClick={this.toggleFavorites}\n                            >\n                            All                            \n                        </NavLink>\n                    </>\n                    }\n                </>\n                }\n              </div>\n            </div>\n        )\n    }\n}\n\nSortMovies.propType = {\n    sortMovies: PropTypes.func,\n    status: PropTypes.string\n}\n","import React from 'react';\nimport { Card } from '../Card/Card';\nimport { SortMovies } from '../SortMovies/SortMovies';\nimport PropTypes from 'prop-types';\nimport './Cards.scss';\n\n export const Cards = (props) => {\n  \n  const injectMovies = (movies) => {\n    return movies.map((movie, i)=> {\n      return (\n        <Card \n          key={i} \n          movies={movie}\n          getMovieDetails={props.getMovieDetails}\n          retrieveComments={props.retrieveComments}\n          ratedMovies={props.ratedMovies.find(ratedMovie => ratedMovie.movie_id === movie.id) || {}}\n          favorites={props.favorites.find(favoritedMovie => favoritedMovie === movie.id) || null}\n          toggleFavorite={props.toggleFavorite}\n          userData={props.userData.id || null}\n        />\n      )\n    });\n  }\n    return (\n      <>\n        <SortMovies \n          sortMovies={props.sortMovies} \n          userData={props.userData.id || ''}\n        />\n        <section className=\"card-area\">\n        {injectMovies(props.movies)}\n        </section> \n      </>\n    )\n}\n\nCards.propTypes = {\n  movies: PropTypes.array,\n  sortMovies: PropTypes.func,\n  ratedMovies: PropTypes.array,\n  getMovieDetails: PropTypes.func,\n  retrieveComments: PropTypes.func,\n  favorites: PropTypes.array,\n  toggleFavorite: PropTypes.func,\n  userData: PropTypes.object\n}\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { WelcomingSection } from '../WelcomingSection/WelcomingSection'\nimport { Cards }  from '../Cards/Cards'\nimport './Homepage.scss';\n\nexport const Homepage = (props) => {\n\n  return(\n    <>\n      <WelcomingSection \n        userData={props.userData}\n      />\n\n      <Cards \n        movies={props.movies}\n        getMovieDetails={props.getMovieDetails}\n        sortMovies={props.sortMovies}\n        ratedMovies={props.ratedMovies}\n        retrieveComments={props.retrieveComments}\n        toggleFavorite={props.toggleFavorite}\n        favorites={props.favorites}\n        userData={props.userData}\n      />\n    </>\n  )\n}\n\nHomepage.propTypes = {\n  userData: PropTypes.object,\n  movies: PropTypes.array,\n  getMovieDetails: PropTypes.func,\n  sortMovies: PropTypes.func,\n  ratedMovies: PropTypes.array,\n  favorites: PropTypes.array,\n  retrieveComment: PropTypes.func,\n  toggleFavorite: PropTypes.func\n}\n\n","import React from 'react';\nimport './ErrorBoundary.scss';\n\nexport const ErrorBoundary = () => {\n// export const ErrorBoundary = (props) => {\n  return (\n    <>\n      <section className='error-section'>\n        <h1>Something went wrong.</h1> \n        {/* <h2>{props.error}</h2> */}\n        <img alt='Old Man Shruggin' src='https://i.stack.imgur.com/eQ20E.jpg'></img>\n      </section>\n    </>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss'\nimport moment from 'moment'\n\nexport const MovieCard = ({ movieDetails, ratedMovies}) =>{\n\n  const isMovieIncluded = ratedMovies.find(ratedMovie => ratedMovie.movie_id === movieDetails.id) || '';\n  const genreList = movieDetails.genres.map((genre, i) => <p className='single-genre'key={i}>-{genre}</p>)\n\n  return (\n    <div  className=\"movie-card-container\">\n\n      <div className=\"inner-container\">\n\n        <div className=\"overview-container\">\n          <h1 className=\"overview-container\">Overview</h1>\n          <p className=\"value overview\">{movieDetails.overview}</p>\n        </div>\n\n        <div className=\"box rating-container\">\n          <h1 className=\"title rating-title\">Rating</h1>\n          <p className=\"value average-rating\">{movieDetails.average_rating.toFixed(1)}</p>\n        </div>\n\n        {isMovieIncluded && <div className=\"box rating-container\">\n          <h1 className=\"title rating-title\">Your rating</h1>\n          <p className=\"value average-rating\">{isMovieIncluded.rating.toFixed(1)}</p>\n        </div>}\n\n        <div className=\"box runtime-container\">\n          <h1 className=\"title runtime-title\">Time</h1>\n          <p className=\"value runtime\">{movieDetails.runtime === 0 ? 'No runtime found' : `${movieDetails.runtime} mins.`}</p>\n        </div>\n\n        <div className=\"box budget-container\">\n          <h1 className=\"title budget-title\">budget</h1>\n          <p className=\"value budget\">{movieDetails.budget === 0 ? 'No budget found' : `$ ${movieDetails.budget}`}</p>\n        </div>\n\n        <div className=\"box revenue-container\">\n          <h1 className=\"title revenue-title\">revenue</h1>\n          <p className=\"value revenue\">{movieDetails.revenue === 0 ? 'No revenue found' : `$ ${movieDetails.revenue}`}</p>\n        </div>\n\n        <div className=\"box release-container\">\n          <h1 className=\"title release-title\">release date</h1>\n          <p className=\"value release\">{!movieDetails.release_date  ? 'No release date found' : moment(movieDetails.release_date).format(\"MMM Do YY\")}</p>\n        </div>\n\n        <div className=\"box genre-container\">\n          <h1 className=\"title genre-title\">genres</h1>\n          <ul className=\"genres\">{genreList}</ul>\n        </div>\n\n      </div>\n    </div>\n \n  )\n}\n\nMovieCard.propTypes = {\n  movieDetails: PropTypes.object,\n  ratedMovies: PropTypes.array\n}\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport './MovieHeader.scss';\nimport Select from 'react-select';\n\nexport class MovieHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedOption: null,\n          }\n          this.ratingValue = [\n              { value: 1, label: '1' },\n              { value: 2, label: '2' },\n              { value: 3, label: '3' },\n              { value: 4, label: '4' },\n              { value: 5, label: '5' },\n              { value: 6, label: '6' },\n              { value: 7, label: '7' },\n              { value: 8, label: '8' },\n              { value: 9, label: '9' },\n              { value: 10, label: '10' },\n              \n            ];\n        }\n\n    handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    }\n\n    updateRating = () => {\n        this.props.addRating(this.state.selectedOption)\n    }\n\n    removeRating = () => {\n        this.props.deleteRating()\n    }\n\n    toggleFavorite(event) {\n        event.preventDefault();\n        this.props.toggleFavorite(this.props.movieId)\n    }\n\n    render() {\n\n        const {title, tagline} = this.props.movieDetails;\n\n        return (\n            <div className=\"movie-header\">\n            <h1 className=\"title\">{title}</h1>\n            <h2 className=\"tagline\">{tagline}</h2>          \n            {this.props.favorites && this.props.name &&\n            <button className=\"favorite-movie\" onClick={(event) => this.toggleFavorite(event)}><span role=\"img\" aria-label=\"heart-filled\">❤️</span></button>\n            }\n            \n            {!this.props.favorites && this.props.name &&\n            <button className=\"favorite-movie\" onClick={(event) => this.toggleFavorite(event)}><span role=\"img\" aria-label=\"heart-empty\">♡</span></button>\n            }\n            {this.props.name && <div className=\"rate-movie\">\n                \n                <button className=\"delete-rating\" onClick={this.removeRating}>Delete Rating</button>\n                \n                    <Select \n                      role=\"select-rating\"\n                      placeholder=\"Rating\" \n                      className=\"selector\" \n                      options={this.ratingValue} \n                      value={this.state.selectedOption} \n                      onChange={this.handleChange}\n                    />  \n\n                <button className=\"add-rating\" onClick={this.updateRating}>Rate Movie</button>\n            </div>}\n        </div>\n    )\n    }\n}\n\nMovieHeader.propTypes = {\n    name: PropTypes.string,\n    movieDetails: PropTypes.object,\n    deleteRating: PropTypes.func,\n    addRating: PropTypes.func,\n    favorites: PropTypes.number\n}\n","import React, {Component} from 'react';\nimport './Comment.scss';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nexport class Comment extends  Component {\n  getCommentId = (event) => {\n    if (!this.props.name){\n      return false\n    }\n    this.props.likeComment(event.target.id)\n    event.target.style.color = \"#3d7ea6\"\n  }\n  \n  render() {\n    const {author, time, comment, id, replyCount} = this.props.comment\n\n    return (\n      <div \n        id={id}\n        role=\"textbox\"\n        type=\"comments\"\n        className=\"comments\">\n  \n        <div className=\"user-container\">\n          <h1 className=\"user\">{author}</h1> \n          <h1 className=\"time\">{moment(time).from()}</h1> \n        </div>\n  \n       <p className=\"comment-text\">{comment}</p>\n       \n        <div className=\"buttons-container\">\n          <i \n            id={id} \n            className={replyCount > 0 ? \"fas blue fa-thumbs-up\": \"fas fa-thumbs-up\"} \n            onClick={this.getCommentId} \n            name=\"like\"\n            role=\"button\">\n            like\n          </i>\n          \n          <h3 className=\"like-count\">{replyCount}</h3>\n          {/* the functionality to unlike and remove comment will be added shortly */}\n          {/* <i id={id} className=\"far fa-thumbs-down\"></i>\n              <i id={id} className=\"far fa-trash-alt\"></i>*/}\n        </div> \n      </div>\n  \n      )\n    }\n  }\n \nComment.propTypes = {\n    comment: PropTypes.object,\n    name: PropTypes.string,\n    likeComment: PropTypes.func\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Comment } from '../Comment/Comment'\n\nimport './Comments.scss';\nimport moment from 'moment';\n\nexport class Comments extends Component  {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      comment : '',\n      likeStatus: false,\n      time: moment(),\n      replies: []\n    }\n  }\n\n    updateValue = (event) => {\n      event.preventDefault();\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n    postComment = (event) => {\n      event.preventDefault()\n      if(!this.state.comment || !this.props.name){\n          return false\n      }\n      this.props.newComment(this.props.movieId, this.state)\n      this.props.retrieveComments(this.props.movieId)\n      this.clearForm(event)\n    }\n    \n    clearForm = (event) => {\n      event.preventDefault()\n      this.setState({comment: ''})\n    }\n\n    likeComment = (commentId) => {\n      const movieComment = this.props.movieComments.find(comment => comment.id === +commentId);\n      const  {movieId, id, likeStatus} = movieComment\n      movieComment.likeStatus = true\n      movieComment.replyCount++\n      this.props.likeMovieComment(movieId, id, likeStatus)\n  }\n\n    injectComments = () => {\n      return this.props.movieComments.map((comment, i) => {\n        return <Comment \n          key={i} \n          comment={comment}\n          likeComment={this.likeComment}\n          name={this.props.name}\n        />\n      })\n    }\n\n  render() {\n      return (\n        <div className=\"comment-container\">\n        \n          <div className=\"inner-comment\">\n            <h1 className=\"comment-title\">Comments</h1>\n            <form className=\"form-comment\">\n              <input\n                className=\"input-text\"\n                type=\"text\"\n                name=\"comment\"\n                maxLength = \"120\"\n                placeholder=\"Add your comment here\"\n                onChange={this.updateValue}\n                value={this.state.comment}\n              />\n\n              <button \n              type=\"comment-button\"\n              onSubmit={this.postComment}\n              onClick={this.postComment}\n              className=\"comment-button\">\n              add comment\n              </button>\n\n              <button \n              type=\"clear-button\"\n              onClick={this.clearForm}\n              name=\"comment\"\n              className=\"clear-button\">\n              clear\n              </button>\n\n            </form> \n\n            {this.injectComments()}\n\n          </div>\n\n        </div>\n      )\n  }\n}\n\nComments.propTypes = {\n    postComment: PropTypes.func,\n    movieId: PropTypes.number,\n    name: PropTypes.string,\n    movieComments: PropTypes.array,\n    likeMovieComment: PropTypes.func\n}","import React from 'react';\nimport ReactPlayer from 'react-player';\nimport PropTypes from 'prop-types'\nimport { MovieCard } from './MovieCard/MovieCard';\nimport { MovieHeader } from './MovieHeader/MovieHeader';\nimport { Comments } from '../Comments/Comments'\nimport './MoviePage.scss';\n\nexport const MoviePage = ( {\n  movieDetails, \n  movieVideo, \n  addRating, \n  name, \n  deleteRating,\n  ratedMovies,\n  newComment,\n  movieComments,\n  favorites,\n  toggleFavorite,\n  retrieveComments,\n  likeMovieComment\n  // toggleFavorite\n}) => {\n  const displayTrailer = () => {\n    return movieVideo.map((video, i) => {\n      return (\n        <div key={i} className=\"movie-trailer\" alt=\"movie trailer\">\n          <ReactPlayer\n            alt=\"movie trailer\"\n            controls={true}\n            width={350}\n            height={250}\n            url={`www.youtube.com/watch?v=${video.key}`}\n          />\n        </div>\n      )\n    });\n  }\n\n  return (\n    <div className=\"movie-container\">\n\n        <div className=\"movie-wrapper\">\n\n          <MovieHeader \n            addRating={addRating} \n            movieDetails={movieDetails}\n            name={name.name}\n            deleteRating={deleteRating}\n            favorites={favorites.find(favoritedMovie => favoritedMovie === movieDetails.id) || null}\n            toggleFavorite={toggleFavorite}\n            movieId={movieDetails.id}\n          />\n\n          <div className=\" img-container\">\n            <img \n              className=\"trailer-image\"\n              src={movieDetails.backdrop_path}\n              alt={`${name.name} backdrop`} \n              />\n          </div>\n          <div className=\" trailer-container\">\n          {movieVideo.length > 0 && <div className=\"trailerList\">{displayTrailer()}</div>}\n          </div>\n\n          <Comments \n            newComment={newComment}\n            movieId={movieDetails.id}\n            name={name.name}\n            movieComments={movieComments}\n            retrieveComments={retrieveComments}\n            likeMovieComment={likeMovieComment}\n          />\n\n          <MovieCard \n            name={name.name}\n            movieDetails={movieDetails}\n            ratedMovies={ratedMovies}\n          />\n\n        </div>\n \n    </div>\n  )\n}\n\nMoviePage.propTypes = {\n  addRating: PropTypes.func,\n  deleteRating: PropTypes.func,\n  movieDetails: PropTypes.object,\n  movieVideo: PropTypes.array,\n  name: PropTypes.object,\n  ratedMovies: PropTypes.array,\n  newComment: PropTypes.func,\n  movieComments: PropTypes.array,\n  toggleFavorite: PropTypes.func,\n  favorites: PropTypes.array,\n  retrieveComments: PropTypes.func,\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../Homepage/Homepage.scss'\n\nexport const NavBar = (props) => {\n  const {logOut, name} = props;\n    return (\n        <nav className=\"nav-bar\">\n          <h1 className=\"main-title\"><i className=\"fas fa-seedling\"></i>Rancid Tomatillos</h1>\n          <div className=\"search-container\">\n          </div>\n          <div className='button-container'>\n            <Link to= '/' >\n            <button className=\"Login-button\">home</button>\n            </Link>\n            <Link to={name ? '/' :'/login'}>\n            <button onClick={logOut} className=\"Login-button\">{name ? 'Log out' : 'Log in'}</button>\n            </Link>\n          </div>\n        </nav>\n    )\n}\n\nNavBar.prototype = {\n  name: PropTypes.string,\n  logOut: PropTypes.func\n}\n","const fetcher = {\n\n  fetchAllMovies() {\n    const fetchedAllMovies = 'https://rancid-tomatillos.herokuapp.com/api/v2/movies'\n    return fetch(fetchedAllMovies)\n    .then(response => {\n      if(response.ok) {\n        return response.json()\n      } else {\n        throw response\n      }\n    })\n    .then(data => data)\n    },\n\n    fetchSingleMovie(movieID) {\n      const fetchedSingleMovie = `https://rancid-tomatillos.herokuapp.com/api/v2/movies/${movieID}`\n      return fetch(fetchedSingleMovie)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    fetchMovieVideo(movieID) {\n      const fetchedMovieVideos = `https://rancid-tomatillos.herokuapp.com/api/v2/movies/${movieID}/videos`\n      return fetch(fetchedMovieVideos)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    fetchUser(userInfo) {\n      let int = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInfo)\n    }\n      const fetchedUser = `https://rancid-tomatillos.herokuapp.com/api/v2/login`\n      return fetch(fetchedUser, int)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data.user)\n    },\n\n    fetchUserRatings(userID) {\n      const fetchedUserRatings = `https://rancid-tomatillos.herokuapp.com/api/v2/users/${userID}/ratings`\n      return fetch(fetchedUserRatings)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data.ratings)\n    },\n\n    fetchCreateUserRating(userID, newRating) {\n      let int = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newRating)\n      }\n      const fetchedUserRating = `https://rancid-tomatillos.herokuapp.com/api/v2/users/${userID}/ratings`\n      return fetch(fetchedUserRating, int)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    fetchDeleteUserRating(userID, ratingID) {\n      let int = { method: 'DELETE'}\n      const fetchedDeleteRating = `https://rancid-tomatillos.herokuapp.com/api/v2/users/${userID}/ratings/${ratingID}`\n      return fetch(fetchedDeleteRating, int)\n      .then(request => request.json())\n      .then(promise => promise)\n      .catch(err => err.message)\n      // .then(response => {\n      //   if(response.ok) {\n      //     return response.json()\n      //   } else {\n      //     throw response\n      //   }\n      // })\n      // .then(data => data)\n    },\n\n    addMovieComment(movieID, comment){\n      const int = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(comment)\n    }\n      const URL = `http://localhost:3001/api/v1/movies/${movieID}/comments`\n      return fetch(URL, int)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    likeMovieComment(movieID, commentID, commentStatus){\n      const int = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(commentStatus)\n    }\n      const URL = `http://localhost:3001/api/v1/movies/${movieID}/comments/${commentID}`\n      return fetch(URL, int)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    getMovieComments(movieID){\n      const URL = `http://localhost:3001/api/v1/movies/${movieID}/comments`\n      return fetch(URL)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    getUpdatedMovieComments(movieID, commentID){\n      const URL = `http://localhost:3001/api/v1/movies/${movieID}/comments/${commentID}`\n      return fetch(URL)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    getUserFavorites() {\n      const fetchedDeleteRating = `http://localhost:3001/api/v1/favorites`\n      return fetch(fetchedDeleteRating)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    },\n\n    addUserFavorites(movieID) {\n      const int = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(movieID)\n      }\n      const fetchedDeleteRating = `http://localhost:3001/api/v1/favorites`\n      return fetch(fetchedDeleteRating, int)\n      .then(response => {\n        if(response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(data => data)\n    }\n}\n\n  export default fetcher;\n  ","import React, {Component} from 'react';\nimport {\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport {LoginForm} from '../LoginForm/LoginForm'\nimport { Homepage } from '../Homepage/Homepage'\nimport { ErrorBoundary }  from '../ErrorBoundary/ErrorBoundary';\nimport { MoviePage } from '../MoviePage/MoviePage'\nimport { NavBar } from '../NavBar/NavBar'\nimport fetcher from '../API/APIcalls';\nimport './App.scss';\n\nexport class App extends Component{\n  constructor() {\n    super()\n\n    this.state = {\n      userData:  {\n        id: null,\n        name: '',\n        email: ''\n      },\n      movies: [],\n      movieComments: [],\n      ratedMovies: [],\n      movieID: null,\n      movieDetails: {},\n      movieVideo: {},\n      favorites: [],\n      searchDirections: '',\n      error: ''\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: {errorMessage: error, errorInfo: info} });\n  }\n\n  authenticateUser = async (credentials) => {\n    try {\n      const userData = await fetcher.fetchUser(credentials);\n      if(userData) {\n        this.setState({ userData });\n        this.getUserRatings(this.state.userData);\n        this.setState({ error: '' })\n      } else {\n        alert('Those aren\\'t the right credentials')\n      }\n      } catch(error) {\n      this.setState({ error: `You've got a log in error: Error${error.status}` })\n    }\n  }\n\n  getUserRatings = async (userData) => {\n    try {\n      const ratedMovies = await fetcher.fetchUserRatings(userData.id)\n      this.setState({ ratedMovies });\n      await this.retrieveFavorites();\n      this.setState({ error: '' })\n    } catch(error) {\n      this.setState({ error: `You've got user rating error: Error ${error.status}` })\n    }\n  }\n\n  logOut = () => {\n    this.setState ( {\n      userData:  {\n        id: null,\n        name: '',\n        email: ''\n      }\n    })\n  }\n\n  getMovieDetails = async(movieID) => {\n    try {\n      const promiseMovie = await fetcher.fetchMovieVideo(movieID);\n      const promiseDetails = await fetcher.fetchSingleMovie(movieID);\n      this.setState({\n        movieID: movieID,\n        movieDetails : promiseDetails.movie,\n        movieVideo: promiseMovie.videos\n      })\n      this.setState({ error: '' })\n    } catch(error) {\n      this.setState({ error: `You've got a movie detail error: Error ${error.status}` })\n    }\n  }\n\n  async loadAllMovies() {\n    try {\n      const promise = await fetcher.fetchAllMovies();\n      this.setState({movies: promise.movies})\n      this.setState({ error: '' })\n    } catch(error) {\n      this.setState({ error: `You've got a movie loading error: Error ${error.status}` })\n    }\n  }\n\n  async componentDidMount() {\n    this.loadAllMovies()\n  }\n\n  sortMovies = (value) => {\n    if (!value || value === '--none--') {\n      this.setState({ searchDirections: this.state.movies })\n    } else if (value === 'descending'){\n      const sortedMovies = this.state.movies.sort((a, b) => a.average_rating - b.average_rating)\n      this.setState({ searchDirections: sortedMovies })\n    } else if (value === 'ascending'){\n      const sortedMovies = this.state.movies.sort((a, b) => b.average_rating - a.average_rating)\n      this.setState({ searchDirections: sortedMovies })\n    }\n  }\n\n   addRating = async (desiredRatingByUser) => {\n    const movieToRate = this.state.ratedMovies.find(ratedMovie => ratedMovie.movie_id === this.state.movieID)\n    if (!desiredRatingByUser) {\n      return alert('You have to select a rating to rate a movie!')\n    } else if (!movieToRate) {\n      try {\n        const newRating = {movie_id: this.state.movieID, rating: desiredRatingByUser.value}\n        await fetcher.fetchCreateUserRating(this.state.userData.id, newRating)\n        const allUserRatings = await fetcher.fetchUserRatings(this.state.userData.id)\n        this.getMovieDetails(this.state.movieID)\n        this.loadAllMovies()\n        this.setState({ratedMovies: allUserRatings})\n        this.setState({ error: '' })\n      } catch(error) {\n        this.setState({ error: `You've got a rating error: Error ${error.status}` })\n      }\n    } else {\n      alert(\"you already rated this movie! Delete it first to rate again!\")\n    }\n  }\n\ndeleteRating = async () => {\n  const { id } =  this.state.userData\n  let ratingID;\n  if (this.state.ratedMovies.find(ratedMovie => ratedMovie.movie_id === this.state.movieID)) {\n    ratingID = this.state.ratedMovies.find(ratedMovie => ratedMovie.movie_id === this.state.movieID).id\n  } else {\n    ratingID = ''\n  }\n  if(this.state.userData.id && ratingID) {\n    await fetcher.fetchDeleteUserRating(id, ratingID)\n    const allUserRatings = await fetcher.fetchUserRatings(this.state.userData.id)\n    this.getMovieDetails(this.state.movieID)\n    this.loadAllMovies()\n    this.setState({ratedMovies: allUserRatings})\n    this.setState({ error: '' })\n  } else {\n    alert('There is no rating to delete!')\n  }\n}\n\n  retrieveFavorites = async() => {\n    try {\n      const favoriteMovies = await fetcher.getUserFavorites();\n      this.setState({ favorites: favoriteMovies })\n      this.setState({ error: '' })\n    } catch(error) {\n      this.setState({ error: `You've got a retrieving favorite error: Error ${error.status}` })\n    }\n  }\n\n  toggleFavorite = async(movieID) => {\n    try {\n      await fetcher.addUserFavorites({ id: movieID });\n      await this.retrieveFavorites();\n    } catch(error) {\n      this.setState({ error: `You've got a toggle favorite error: Error ${error.status}` })\n    }\n  }\n\n  newComment = async(movieId, userComment) => {\n    const { name } = this.state.userData\n    const data = {\n      comment: userComment.comment,\n      author: name,\n      time: userComment.time,\n      likeStatus: userComment.likeStatus,\n      replyCount: 0,\n      replies: []\n    }\n    if (!name) {\n      return false\n    }\n    try {\n      await fetcher.addMovieComment(movieId, data);\n      this.setState({ error: '' })\n    } catch(error) {\n      this.setState({ error: `You've got a new comment error: Error ${error.status}` })\n    }\n    this.retrieveComments(movieId)\n  }\n\n  retrieveComments = async (movieId) => {\n    try {\n      const promise = await fetcher.getMovieComments(movieId)\n        this.setState({movieComments: promise.comments})\n        this.setState({ error: '' })\n      } catch(error) {\n        this.setState({ error: `You've got a retrieve comment error: Error ${error.status}` })\n      }\n    }\n\n  likeMovieComment = async (movieID, commentID, commentStatus) => {\n    const { name } = this.state.userData\n    if (!name){\n      return false;\n    }\n    try {\n      const status = { likeStatus: commentStatus }\n      await fetcher.likeMovieComment(movieID, commentID, status);\n      this.retrieveComments(movieID)\n    } catch(error) {\n      this.setState({ error: `You've got a like movie comment error: Error ${error.status}` })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <h1 className=\"login-info\">\n          <b>\n            {this.state.userData.email ? this.state.userData.name + ' is currently ' : 'not '}\n          </b>\n          logged in\n          {this.state.error && <p>{this.state.error}</p>}\n        </h1>\n        <NavBar\n            name={this.state.userData.name}\n            logOut={this.logOut}\n          />\n        <Switch>\n          <Route\n            path='/login'\n            render={() => {\n            return  <LoginForm\n              authenticateUser={this.authenticateUser}\n              login={this.state.userData}/>\n            }}\n          />\n\n          <Route\n            exact path= '/'\n            render={() => {\n              return (\n                <Homepage\n                  userData={this.state.userData}\n                  movies={this.state.searchDirections || this.state.movies}\n                  movieComments={this.state.movieComments}\n                  getMovieDetails={this.getMovieDetails}\n                  sortMovies={this.sortMovies}\n                  ratedMovies={this.state.ratedMovies}\n                  retrieveComments={this.retrieveComments}\n                  favorites={this.state.favorites}\n                  toggleFavorite={this.toggleFavorite}\n                />\n              )\n            }}\n          />\n\n          <Route\n            exact path={`/movies/${this.state.movieID}`}\n            render={ () => {\n              return <MoviePage\n                addRating={this.addRating}\n                deleteRating={this.deleteRating}\n                movieDetails={this.state.movieDetails}\n                movieVideo={this.state.movieVideo}\n                name={this.state.userData}\n                ratedMovies={this.state.ratedMovies}\n                favorites={this.state.favorites}\n                toggleFavorite={this.toggleFavorite}\n                newComment={this.newComment}\n                retrieveComments={this.retrieveComments}\n                movieComments={this.state.movieComments}\n                likeMovieComment={this.likeMovieComment}\n              />\n            }}\n          />\n          <Route\n            exact path='/favorites'\n            render={ () => {\n              return <Homepage\n              userData={this.state.userData}\n              movies={this.state.movies.filter(movie => this.state.favorites.includes(movie.id))}\n              getMovieDetails={this.getMovieDetails}\n              sortMovies={this.sortMovies}\n              ratedMovies={this.state.ratedMovies}\n              retrieveComments={this.retrieveComments}\n              favorites={this.state.favorites}\n              toggleFavorite={this.toggleFavorite}\n              />\n            }}\n          />\n\n          <Route\n            exact path='*'\n            render={() => {\n            return  <ErrorBoundary />\n          }} />\n        </Switch>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from '../src/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter >\n      <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}